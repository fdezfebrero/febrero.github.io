---
title: "Git Flow"
layout: post
date: 2021-09-20 01:40
image: /assets/images/gitflow.jpeg
headerImage: true
tag:
- markdown
- asana
- scrum
- web
star: true
category: blog
author: febrero
description:  Gestionar un proxecto con Asana e Scrum
---

# Git Flow

[Git Flow][1] é un modelo de ramificación Git alternativo que usa ramas de funcións e varias ramas pais. Foi Vincent Driessen en nvie quen o publicou por primeira vez e quen o popularizou. En comparación co desenvolvemento baseado en tronco, Gitflow ten varias ramas de maior duración e maiores compromisos. Segundo este modelo, os desenvolvedores crean unha rama de función e atrasan a fusión coa rama principal principal ata completar a función. Estas ramas de función de longa duración requiren máis colaboración para a fusión e teñen un maior risco de desviarse da rama do tronco. Tamén poden introducir actualizacións conflitivas.

Gitflow pódese usar en proxectos que teñen un ciclo de lanzamento programado, así como a mellor práctica de DevOps de entrega continua. Este fluxo de traballo non engade novos conceptos ou comandos que non sexan os requiridos para o fluxo de traballo de rama de funcións. O que fai é asignar funcións moi específicas ás distintas ramas e definir como e cando deben interactuar. Ademais de funcionar sucursais, use ramas individuais para preparar, manter e rexistrar publicacións. Por suposto, tamén pode aproveitar todos os beneficios do fluxo de traballo da rama de funcións: solicitudes de extracción, experimentos illados e colaboración máis eficiente. 


---

## Funcionamento
### Principais e ramas de desenvolvemento

## Rama Master e Develop
En lugar dunha única rama principal, este fluxo de traballo utiliza dúas ramas para rexistrar a historia do proxecto. A rama principal almacena o historial de lanzamentos oficial e a rama de desenvolvemento serve como rama de integración para funcións. Ademais, é unha boa idea etiquetar todos os commit na rama principal cun número de versión.

![Markdowm Image][2]
<figcaption class="caption">git flow init</figcaption>

#### Ramas de función 
Todas as novas funcións deben residir na súa propia rama, que se pode enviar ao repositorio central para realizar copias de seguridade / colaboración. Non obstante, en vez de ramificarse desde a principal, as ramas de características usan a rama de desenvolvemento como a rama principal. Cando unha función finaliza, volve combinarse en desenvolver. As funcións nunca deben interactuar directamente coa Principal.

As ramas de funcións normalmente créanse a partir da última ramificación de desenvolvemento.

![Markdowm Image][3]
<figcaption class="caption">git flow feature start feature_branch</figcaption>

Cando remate o traballo de desenvolvemento da función, o seguinte paso é combinar a función rama en desenvolvemento.

![Markdowm Image][4]
<figcaption class="caption">git flow feature finish feature_branch</figcaption>

#### Ramas de publicación 

Cando o desenvolvemento adquiriu a funcionalidade suficiente para unha versión, debería desenvolver unha rama de lanzamento (ou liberación) de desenvolvemento. A creación desta rama comeza o seguinte ciclo de lanzamento, polo que non se poden engadir novas funcións despois deste punto (só deberían producirse correccións de erros, xeración de documentación e outras tarefas orientadas á versión). Cando estea listo para o lanzamento, a rama de lanzamento únese a principal e etiquétase cun número de versión. Ademais, debería fusionarse de novo en desenvolver xa que o desenvolvemento podería progresar desde que comezou a publicación.

Usar unha rama específica para preparar publicacións permite a un equipo refinar a publicación actual mentres outro equipo segue traballando nas funcións da seguinte publicación. Tamén crea fases de desenvolvemento ben definidas (por exemplo, é fácil dicir: "Esta semana preparámonos para a versión 4.0" e vémola escrita na estrutura do repositorio).

Crear ramas de lanzamento é outra operación de ramificación sinxela. Do mesmo xeito que as ramas de características, as ramas de lanzamento baséanse na rama de desenvolvemento. Pódese crear unha nova rama de lanzamento empregando os seguintes métodos.


![Markdowm Image][5]
<figcaption class="caption">git flow release start 0.1.0</figcaption>

En canto a versión estea lista para a súa liberación, combinarase coas ramas principal e desenvolverá e, a continuación, eliminarase a rama da versión. É importante fusionalo de novo na rama de desenvolvemento porque se puideron engadir importantes actualizacións á rama de lanzamento e é necesario que accedan a elas novas funcións. Se a revisión de código é moi importante para a súa organización, este sería o lugar ideal para unha solicitude de extracción.

![Markdowm Image][6]
<figcaption class="caption">git flow release finish '0.1.0'</figcaption>

---
### Ramas de corrección 

As ramas de mantemento, revisión ou mantemento úsanse para reparar rapidamente as versións de produción. As ramas de revisión son moi semellantes ás ramas de lanzamento e características, agás que están baseadas na rama principal e non na rama de desenvolvemento. Esta é a única rama que debería ramificarse directamente desde a principal. Cando remate a corrección, debe combinarse con main e develop (ou a rama de lanzamento actual) e main debe etiquetarse cun número de versión actualizado.

Ter unha liña de desenvolvemento dedicada para a corrección de erros permítelle ao seu equipo resolver problemas sen interromper o resto do fluxo de traballo nin esperar ao seguinte ciclo de lanzamento. Podes pensar en ramas de mantemento como ramas de lanzamento ad hoc que funcionan directamente coa rama principal. Pódese crear unha nova rama de revisión cos seguintes métodos:

![Markdowm Image][7]
<figcaption class="caption">git flow hotfix start hotfix_branch</figcaption>

![Markdowm Image][8]
<figcaption class="caption">git flow hotfix finish hotfix_branch</figcaption>

---

Maís info:

[atlassian: gitflow-workflow][9]

[gfourmis: gitflow-sin-morir-en-el-intento][10]


---



[1]: https://github.com/nvie/gitflow/wiki/Installation
[2]: https://i.imgur.com/1wpSdMP.png
[3]: https://i.imgur.com/aqK2ehQ.png
[4]: https://i.imgur.com/h3wFi8o.png
[5]: https://i.imgur.com/xL2QnhU.png
[6]: https://i.imgur.com/YmQMySa.png
[7]: https://i.imgur.com/RK80VmY.png
[8]: https://i.imgur.com/7ImsnrT.png
[9]: https://www.atlassian.com/es/git/tutorials/comparing-workflows/gitflow-workflow
[10]: https://gfourmis.co/gitflow-sin-morir-en-el-intento/
[11]: